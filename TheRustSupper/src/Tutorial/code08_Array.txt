#![allow(unused)]

// https://youtu.be/BpPEoZW5IiY?si=goDW5z6qEkPok4pe

fn main() {
//**************************************************************************************************
// EXAMPLE NO.1 ARRAY
//**************************************************************************************************
// let arr: [i32;5] = [1, 2, 3, 4, 5];
// assert!(arr.len() == 5);

//**************************************************************************************************
// EXAMPLE NO.2 SIZE OF ARRAY
//**************************************************************************************************
// let arr: [char; 3] = ['a', 'b', 'c'];
// assert!(std::mem::size_of_val(&arr) == arr.len()*4);

//**************************************************************************************************
// EXAMPLE NO.3 CREATE THE ARRAY WITH SAME ELEMENT
//**************************************************************************************************
// // https://doc.rust-lang.org/rust-by-example/primitives/array.html
// let list: [i32; 100] = [1;100] ;
// assert!(list[0] == 1);
// assert!(list.len() == 100);

//**************************************************************************************************
// EXAMPLE NO.4 LET THE_FIRST = ARRAY[0]
//**************************************************************************************************
// let arr = ['a', 'b', 'c'];
// let ele = arr[0]; // Only modify this line to make the code work!
// println!("{}",ele);
// assert!(ele == 'a');

//**************************************************************************************************
// EXAMPLE NO.
//**************************************************************************************************
// let names = [String::from("Sunfei"), "Sunface".to_string()];
// // `Get` returns an Option<T>, it's safe to use
// let name0 = names.get(0).unwrap();
// let _name1 = &names[1];
// // But indexing is not safe
// // let _name2 = &names[2];
// println!("{}",name0);
// println!("{}",_name1);
// println!("Success!");
}

/*
cargo run
*/
