#![allow(unused)]
// https://stackoverflow.com/questions/37410672/expected-type-parameter-found-u8-but-the-type-parameter-is-u8
use std::fmt;
use std::fmt::Display;
use std::fmt::Debug;
use generic_array::{GenericArray, ArrayLength,arr};
use std::iter::Iterator;
use std::marker::Copy;
use std::default::Default;

struct Array<T:Display+Debug+Copy,N: ArrayLength> {
    data: GenericArray<T, N>
}

impl<T:Display+Debug+Copy,N: ArrayLength> Array <T,N>
{
    fn printloop(&self) -> () {
        for i in &self.data {
            println!("{}", i);
        }
    }

    fn longname(&self) -> String {
        let mut name = "".to_string();
        for i in &self.data {
            name.push_str(&format!("{}", i));
        }
        name
    }

    fn joining(&self, space: String) -> String {
        let mut name = "".to_string();
        for i in &self.data {
            name.push_str(&format!("{}{}", i, space));
        }
        name
    }

    fn lengths(&self) -> u32 {
        self.data.len() as u32
    }
}
trait SayMyName{
    fn my_name(&self) -> String{
        String::from("unknown")
    }
    fn say_my_name(&self) -> String{
        format!("{} (Unknown Type)",self.my_name())
    }
}

trait Greeting{
    fn hello(&self)->String{
        "Hello".to_string()
    }
    fn my_type(&self)->String{
        "is both Greeting and SayMyName.".to_string()
    }
}

enum Occupation{
    Programmer(String),
    Engineer(String),
    Scientist(String),
    Doctor(String),
    Artist(String),
    Writer(String),
    Teacher(String),
    Politician(String),
    Lawyer(String),
    Farmer(String)
}

enum TierList{
    S,
    A,
    B,
    C,
    D,
    F
}

struct Person{
    name:String,
    age:u32,
    occupation:Occupation,
    tierlist:TierList
}

impl SayMyName for Person{
    fn say_my_name(&self)->String{
        format!("{} (Person)",self.name.to_string())
    }
}

struct CEO<const N:usize>{
    name:String,
    age:u32,
    field:String,
    workers:[Person;N]
}

impl <const N:usize>SayMyName for CEO<N>{
    fn say_my_name(&self)->String{
        format!("{} (CEO)",self.name.to_string())
    }
}

// https://users.rust-lang.org/t/how-to-exclude-a-type-from-generic-trait-implementation/26156/5
impl <T:Display+Debug+Copy,N: ArrayLength> SayMyName for Array<T,N> {}
impl <N: ArrayLength> SayMyName for [Array<&str,N>]{
// impl <const COUNT: usize> SayMyName for [Array<&str, COUNT>] {
    fn my_name(&self) -> String{
        (*self)[0].data[0].to_string()
    }

}
impl <N: ArrayLength> Greeting for [Array<&str,N>]{}

// Traits as Parameters
fn is_1st_char_capital(name:&impl SayMyName)->bool{
    // https://www.educative.io/answers/how-to-check-if-a-character-is-uppercase-in-rust
    // https://stackoverflow.com/questions/30811107/how-do-i-get-the-first-character-out-of-a-string
    name.say_my_name().chars().nth(0).unwrap().is_uppercase()
}

fn count_char(name:&impl SayMyName)->u32{
    // https://stackoverflow.com/questions/46290655/does-rusts-string-have-a-method-that-returns-the-number-of-characters-rather-th
    name.say_my_name().chars().count() as u32
}

fn greet_ii(item: &(impl SayMyName + Greeting))->String {
    format!("{}, my name is {}",item.hello(),item.say_my_name())
}

fn its_type_ii<T:SayMyName + Greeting>(item:&T)->String {
    format!("{} {}",item.say_my_name(),item.my_type())
}

fn println_2types<T,U,COUNT>(cheche:T,avatar:U)where 
    T:SayMyName,
    U:SayMyName+Greeting
{
    println!("Person = {}",cheche.say_my_name());
    println!("Array  = {}",greet_ii(&avatar));
}

fn main(){
let cheche:Person=Person{
    name:"CheChe".to_string(),
    age:23 as u32,
    occupation:Occupation::Programmer("No Job".to_string()),
    tierlist:TierList::F
};
let elon_musk:CEO<4>=CEO{
    name:"Elon Musk".to_string(),
    age:52 as u32,
    field:"Technology".to_string(),
    workers:[
Person{
    name:"Mumu".to_string(),
    age:26 as u32,
    occupation:Occupation::Scientist("Biologist".to_string()),
    tierlist:TierList::A
},
Person{
    name:"Tata".to_string(),
    age:20 as u32,
    occupation:Occupation::Engineer("Musical Civil Engineer".to_string()),
    tierlist:TierList::A
},
Person{
    name:"Khem".to_string(),
    age:21 as u32,
    occupation:Occupation::Programmer("ML Engineer".to_string()),
    tierlist:TierList::A
},
Person{
    name:"Phoom".to_string(),
    age:22 as u32,
    occupation:Occupation::Programmer("Rust Big O Optimizer".to_string()),
    tierlist:TierList::A
},
]
};
let avatar_friends=Array{data:arr!["Aang","Katara","Zuko","Sokka","Toph","Suki","Bumi","Appa","Kuzon","Azula","Tylee","Mia"]};
avatar_friends.printloop();
let long_f64_vector=Array{data:arr![33.2288,23.2233,22.9,3.14159,33.333333333,22.22,9.00321,3.9,3.999900654,3.12213,22.005,1.93,322.3,22.9,33.2,2.9,3.33,22.9,6.3,33.8888,22.9,3.6]};
println!("avatar friends longname = {}",avatar_friends.longname());
println!("count avatar friends = {}",avatar_friends.lengths());
println!("vector space dimension = {}",long_f64_vector.lengths());
println!("avatar name = {}",avatar_friends.say_my_name());
println!("vector name = {}",long_f64_vector.say_my_name());
println!("cheche name = {}",cheche.say_my_name());
println!("elon musk name = {}",elon_musk.say_my_name());
for i in elon_musk.workers{
    println!("{} name = {}",i.my_name(),i.say_my_name())
}
println!("count_char(&avatar_friends) = {}",count_char(&avatar_friends));
println!("count_char(&long_f64_vector) = {}",count_char(&long_f64_vector));

}

/*
cargo run
*/