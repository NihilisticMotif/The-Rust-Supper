#![allow(unused)]
// #[derive(Debug)] // used for debugging

// https://prince.dev/debug-struct
// https://youtu.be/BpPEoZW5IiY?si=goDW5z6qEkPok4pe
use std::fmt;

// https://doc.rust-lang.org/std/f64/consts/constant.E.html
pub const E: f64 = 2.71828182845904523536028747135266250_f64; // 2.7182818284590451f64
// https://doc.rust-lang.org/std/f64/consts/constant.PI.html
pub const PI: f64 = 3.14159265358979323846264338327950288_f64; 

struct TwoWuv{
    x:f64,
    y:f64
}

impl TwoWuv{

    fn plus(&self)->f64{
        self.x+self.y
    }
    fn minus(&self)->f64{
        self.x-self.y
    }
    fn times(&self)->f64{
        self.x*self.y
    }
    fn divide(&self)->f64{
        if self.y==0.0{
            println!("The Input is invalid");
            0.0
        } else{
            self.x/self.y
        }
    }
    fn power(&self)->f64{
        // https://stackoverflow.com/questions/51208703/how-to-raise-a-number-to-a-power
        f64::powf(self.x,self.y)
    }

    fn logarithm(&self)->f64{
        if(self.y!=1.0 && self.y>0.0_f64 && self.x>0.0_f64){
            self.x.log(self.y)
        } else{
            println!("Input is in valid");
            0.0
        }
    }

    fn help(&self)->(){
        println!("function");
        println!("Input var");
        println!("1. x == x");
        println!("2. y == x");
        println!("3. Default == x");
        println!("Input fun");
        println!("1. x == x");
        println!("2. s == sin(x)");
        println!("3. c == cos(x)");
        println!("4. t == tan(x)");
        println!("5. e == e^x");
        println!("6. l == ln(x)");
        println!("7. a == |a|");
        println!("8. Default == x");
    }

    fn function(
        &self,
        var:Option<char>,
        // x == x
        // y == y
        // default == x
        fun:Option<char>
        // x == x
        // s == sin(x)
        // c == cos(x)
        // t == tan(x)
        // e == e^x
        // l == ln(x)
        // a = |x|
        // default == x
    )->f64{
        let mut z:f64=0.0;
        let mut output:Option<f64>=None;
        match var{
            Some(vvv)=>{
                if vvv=='y'{
                    z=self.y;
                } else {
                    z=self.x;
                }
            }
            None=>{z=self.x}
        }
        match fun{
            Some(fff)=>{
                if(fff=='x'){output=Some(z)}
                else if(fff=='s'){output=Some(z.sin())}
                else if(fff=='c'){output=Some(z.cos())}
                else if(fff=='t'){
                    // https://stackoverflow.com/questions/62144550/how-to-round-a-number-up-or-down-in-rust
                    let floor:i32=((2.0*(z as f64)/PI-1.0)/2.0).floor() as i32;
                    let ceil:i32=((2.0*(z as f64)/PI-1.0)/2.0).ceil() as i32;
                    if((PI/2.0-0.00001)*((2*floor+1) as f64)<z&&z<(PI/2.0+0.00001)*((2*floor+1) as f64)){output=None}
                    else if((PI/2.0-0.00001)*((2*ceil+1) as f64)<z&&z<(PI/2.0+0.00001)*((2*ceil+1) as f64)){output=None}
                    else{output=Some(z.tan())}
                }
                else if(fff=='e'){output=Some(f64::powf(E,z))}
                else if(fff=='l'){
                    if z <= 0.0_f64 {
                        output = None
                    } else {
                        output = Some(z.log(E))
                    }
                }
                else if(fff=='a'){output=Some(z.abs())}
                else{output=Some(z)}
            }
            None=>{output=Some(z)}
        }
        match output{
            Some(yyy)=>{yyy}
            None=>{
                println!("The Input is invalid");
                0.0
            }
        }
    }
}

/*
Reference
1. https://doc.rust-lang.org/std/keyword.impl.html
2. https://doc.rust-lang.org/rust-by-example/flow_control/if_else.html
3. https://doc.rust-lang.org/std/option/
4. https://stackoverflow.com/questions/51208703/how-to-raise-a-number-to-a-power
*/

fn main() {
println!("\n//**************************************************************************************************");
println!("// INITIALIZE TWOWUV");
println!("//**************************************************************************************************");
let mut island_in_the_sun:TwoWuv=TwoWuv{
    x:(2.0_f64).powf(0.5_f64),
    y:0.0
};
// https://doc.rust-lang.org/rust-by-example/hello/print/print_debug.html
// println!("{:?}",island_in_the_sun); // invalid
let hawaii_part_ii:TwoWuv=TwoWuv{
    x:5.1413,
    y:2.8172
};
// https://prince.dev/debug-struct
// dbg!(hawaii_part_ii.x); // valid
// dbg!(hawaii_part_ii); // invalid
dbg!(island_in_the_sun.x);
dbg!(island_in_the_sun.y);
dbg!(hawaii_part_ii.x);
dbg!(hawaii_part_ii.y);

println!("\n//**************************************************************************************************");
println!("// PLUS, MINUS, TIMES, DEVIDE, POWER, LOG");
println!("//**************************************************************************************************");
println!("{} + {} = {}",hawaii_part_ii.x,hawaii_part_ii.y,hawaii_part_ii.plus());
println!("{} - {} = {}",hawaii_part_ii.x,hawaii_part_ii.y,hawaii_part_ii.minus());
println!("{} * {} = {}",hawaii_part_ii.x,hawaii_part_ii.y,hawaii_part_ii.times());
println!("{} / {} = {}",hawaii_part_ii.x,hawaii_part_ii.y,hawaii_part_ii.divide());
println!("{} ^ {} = {}",hawaii_part_ii.x,hawaii_part_ii.y,hawaii_part_ii.power());
println!("log _{} ({}) = {}",hawaii_part_ii.y,hawaii_part_ii.x,hawaii_part_ii.logarithm());

println!("\n//**************************************************************************************************");
println!("// FUNCTION");
println!("//**************************************************************************************************");

hawaii_part_ii.help();
println!("sin({}) = {}",hawaii_part_ii.x,hawaii_part_ii.function(Some('x'),Some('s')));
println!("sin({}) = {}",hawaii_part_ii.y,hawaii_part_ii.function(Some('y'),Some('s')));
println!("log({}) = {}",hawaii_part_ii.y,hawaii_part_ii.function(Some('y'),Some('l')));
println!("cos({}) = {}",hawaii_part_ii.x,hawaii_part_ii.function(Some('x'),Some('c')));
println!("tan({}) = {}",hawaii_part_ii.x,hawaii_part_ii.function(Some('x'),Some('t')));

println!("\n//**************************************************************************************************");
println!("// ERROR");
println!("//**************************************************************************************************");
println!("{} / {} = {}",island_in_the_sun.x,island_in_the_sun.y,island_in_the_sun.divide());
println!("log({}) = {}",island_in_the_sun.y,island_in_the_sun.function(Some('y'),Some('l')));
println!("log _{} ({}) = {}",island_in_the_sun.y,island_in_the_sun.x,hawaii_part_ii.logarithm());

println!("\n//**************************************************************************************************");
println!("// UPDATE");
println!("//**************************************************************************************************");
island_in_the_sun.y=(3.0_f64).powf(0.5_f64);
println!("{} / {} = {}",island_in_the_sun.x,island_in_the_sun.y,island_in_the_sun.divide());

}

/*
cargo run
*/