#![allow(unused)]
// https://stackoverflow.com/questions/37410672/expected-type-parameter-found-u8-but-the-type-parameter-is-u8
use std::fmt;
use std::fmt::Display;
use std::fmt::Debug;
use generic_array::{GenericArray, ArrayLength,arr};
use std::iter::Iterator;
use std::marker::Copy;
use std::default::Default;

#[derive(Debug)]
struct VectorF64<N: ArrayLength> {
    data: GenericArray<f64, N>
}

impl <N: ArrayLength> VectorF64 <N> {
    // https://stackoverflow.com/questions/37410672/expected-type-parameter-found-u8-but-the-type-parameter-is-u8
    // https://www.becomebetterprogrammer.com/rust-fix-doesnt-implement-std-fmt-display/
    
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, ", ")
    }

    fn sigma(&self) -> f64 {
        let mut y = 0.0;
        for i in &self.data {
            y = y + i;
        }
        y
    }

    fn means(&self) -> f64 {
        let mut y = 0.0;
        for i in &self.data {
            y = y + i;
        }
        y as f64 / self.data.len() as f64
    }

    fn std(&self) -> f64 {
        let mut y = 0.0;
        let mean = self.means();
        for i in &self.data {
            y = y + (*i as f64 - mean).powf(2.0);
        }
        y / mean
    }

    fn product(&self) -> f64 {
        let mut y = 1.0;
        for i in &self.data {
            y = y * i;
        }
        y
    }

    fn dotproduct(&self,v:Self) ->f64{
        let mut y = 0.0;
        let mut count=0;
        for i in &self.data {
            y = y + i * v.data[count] ;
            count+=1;
        }
        y
    }

    fn vector_space(&self)->usize{
        self.data.len()
    }

}
fn printloop<T,N>(arg: GenericArray<T,N>) where
    T:Display,
    N: ArrayLength
    {
    let mut count=0;
    for i in arg {
        println!("({}) {}", count,i);
        count+=1;
    }
}
fn main() {
let vec1=VectorF64{data:arr![
    112.3444,
    5.22123,
    44.41,
    2.003,
    344.0,
    11.4,
    5.022,
    2.12,
    1.3,
    44.0,
    4.88,
    5.2,
    10.2,
    12.34,
    4.4,
    5.2,
    12.34,
    4.4,
    5.1,
    2.3,
    44.4,
    5.2]};
let vec2=VectorF64{data:arr![
    33.2288,
    23.2233,
    22.9,
    3.14159,
    33.333333333,
    22.22,
    9.00321,
    3.9,
    3.999900654,
    3.12213,
    22.005,
    1.93,
    322.3,
    22.9,
    33.2,
    2.9,
    3.33,
    22.9,
    6.3,
    33.8888,
    22.9,
    3.6]};
println!("V");
println!("dim_:{}",vec1.vector_space());
println!("sum_:{}",vec1.sigma());
println!("mean:{}",vec1.means());
println!("std_:{}",vec1.std());
println!("prod:{}",vec1.product());
printloop(vec1.data);
println!("U");
println!("dim_:{}",vec2.vector_space());
println!("sum_:{}",vec2.sigma());
println!("mean:{}",vec2.means());
println!("std_:{}",vec2.std());
println!("prod:{}",vec2.product());
printloop(vec2.data);
println!("V * U = {}",vec1.dotproduct(vec2));
}

/*
cargo run
*/
