Enum 
* A compound data type 
* defining a type with only one of a possible set of values 
* we can only access one value at the time.
* can hold additional information using tuple 
* useful when using in match statement

/*
enum ThreeLargestNumberBelow100 {
    Zero=97,
    One,    // 98
    Two,    // 99
}
*/

//**************************************************************************************************
// Option
//**************************************************************************************************

Option is the enum that represent if the value is exists.

/*
// T = can be any type.
enum Option<T>{
    None,
    Some(T)
}
*/

/*
// in code12_enum.txt 
fn matrixproduct_dim(a:(i32,i32),b:(i32,i32))->Option<(i32,i32)>{
    if a.1==b.0{
        Some((a.0,b.1))
    } else{
        None
    }
}
fn main() {
let matrixpair_dim:[[(i32,i32);2];6]=[
    [(2,3),(3,4)],
    [(5,5),(3,4)],
    [(2,5),(5,4)],
    [(1,3),(3,1)],
    [(2,3),(1,4)],
    [(2,2),(1,4)],
    ];
for i in matrixpair_dim{
    let a:(i32,i32) = i[0];
    let b:(i32,i32) = i[1];
    let c:Option<(i32,i32)> = matrixproduct_dim(a,b);
    match c{
        Some(c) =>println!("{:?} * {:?} = {:?}",a,b,c),
        None=>println!("The product of {:?} and {:?} is invalid",a,b)
    }
};
}
*/

//**************************************************************************************************
// KEYWORD
//**************************************************************************************************
1. Cons 
 * Cons does not have a special meaning in Rust. It is only the name that the author of the tutorial chose
 * https://stackoverflow.com/questions/23311773/what-is-cons
2. Nil 
3. self
4. * 
5. impl