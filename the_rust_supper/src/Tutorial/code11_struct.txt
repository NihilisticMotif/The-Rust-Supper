#![allow(unused)]

// https://youtu.be/BpPEoZW5IiY?si=goDW5z6qEkPok4pe
#[derive(Debug)] // used for debugging
struct Rectangle {
    width: u32,
    height: u32,
}
struct Person {
    name: String,
    age: u8,
    hobby: String
}
struct Person2 {
    name: String,
    age: u8,
}

struct Person2B {
    name: String,
    age: Box<u8>,
}
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}

struct File {
    name: String,
    data: String,
}

fn set_email(u: User) -> User {
    User {
        email: String::from("contact@im.dev"),
        ..u
    }
}
fn build_person(name: String, age: u8) -> Person2 {
    Person2 {
        age,
        name
    }
}
struct Unit;
trait SomeTrait {
    // ...Some behaviors defined here.
}

// We don't care about what fields  are  in the Unit, but we care about its behaviors.
// So we use a struct with no fields and implement some behaviors for it
impl SomeTrait for Unit {  }
fn do_something_with_unit(u: Unit) {   }


struct Color(i32, i32, i32);

fn check_color(p: Color) {
    //let (x, y, z) = p; // invalid
    let Color(x, _, z) = p; // invalid
    // let x= p.0; valid
    assert_eq!(x, 0);
    assert_eq!(p.1, 127);
    assert_eq!(p.2, 255);
 }

fn main() {
//**************************************************************************************************
// EXAMPLE NO.1 STRUCTS
//**************************************************************************************************
// let age = 30;
// let p = Person {
//     name: String::from("sunface"),
//     age,
//     hobby:"Convert &str to String.".to_string()
// };

//**************************************************************************************************
// EXAMPLE NO.2 FUNCTION WITH EMPTY STRUCT AS INPUT
//**************************************************************************************************
// let u = Unit;
// do_something_with_unit(u);

//**************************************************************************************************
// EXAMPLE NO.3 PASSING TUPLE STRUCT AS THE INPUT
//**************************************************************************************************
// let v = Color(0, 127, 255);
// check_color(v);

//**************************************************************************************************
// EXAMPLE NO.4 MUT STRUCT
//**************************************************************************************************
// let age = 18;
// let mut p = Person {
//     name: String::from("sunface"),
//     age,
//     hobby:"Eating chess".to_string()
// };
// p.age = 30;
// p.name = String::from("sunfei");

//**************************************************************************************************
// EXAMPLE NO.5 CLONE THE STRUCT AND OVER WRITE IT.
//**************************************************************************************************
// let u1 = User {
//     email: String::from("someone@example.com"),
//     username: String::from("sunface"),
//     active: true,
//     sign_in_count: 1,
// };
// let u2 = set_email(u1);

//**************************************************************************************************
// EXAMPLE NO.6 OPEN DEBUG MODE
//**************************************************************************************************
// let scale = 2;
// let rect1 = Rectangle {
//     width: 30 * scale, // Print debug info to stderr and assign the value of  `30 * scale` to `width`
//     height: 50,
// };
// //dbg!(&rect1); // Valid, Print debug info to stderr
// // [src/main.rs:112] &rect1 = Rectangle {
// //     width: 60,
// //     height: 50,
// // }
// //println!("{}",rec1); // Invalid
// println!("{:?}",rect1); // Valid
// // Rectangle { width: 60, height: 50 }
// let num=88;
// dbg!(num);
// // [src/main.rs:121] num = 88
// println!("{:?}",num);
// // 88

//**************************************************************************************************
// EXAMPLE NO.7 PARTIAL MOVE, THERE IS NO ERROR HERE, BUT IN THE WEBSITE.
//**************************************************************************************************
// let person = Person2B {
//     name: String::from("Alice"),
//     age: Box::new(20),
// };
// // `name` is moved out of person, but `age` is referenced
// let Person2B { name, ref age } = person;
// println!("The person's age is {}", age);
// println!("The person's name is {}", name);
// // Error! borrow of partially moved value: `person` partial move occurs
// //println!("The person struct is {:?}", person);
// // `person` cannot be used but `person.age` can be used as it is not moved
// println!("The person's age from person struct is {}", person.age);

//**************************************************************************************************
// EXAMPLE NO.8
//**************************************************************************************************
// let f = File {
//     name: String::from("readme.md"),
//     data: "Rust By Practice".to_string()
// };
// let _name = f.name;
// // ONLY modify this line
// println!("{}, {}",_name, f.data);
}

/*
cargo run
*/